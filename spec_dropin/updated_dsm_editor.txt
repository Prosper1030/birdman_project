"""
修改 src/ui/dsm_editor.py 的必要部分

在檔案開頭加入新的 import：
"""

# === 在檔案最上方的 import 區段加入 ===
from ..layouts.hierarchical import layout_hierarchical
from .routed_edge_item import RoutedEdgeItem, RoutedEdgeManager  # TODO(next): wire EdgeRoutingEngine -> RoutedEdgeItem

# === 修改 DsmEditor 類別的 applyHierarchicalLayout 方法 ===

def applyHierarchicalLayout(self) -> None:
    """
    階層式佈局 - 使用模組化的佈局演算法。
    
    LAYOUT: moved to src/layouts/hierarchical.py
    """
    # 準備 WBS DataFrame
    task_ids = list(self.nodes.keys())
    wbs_data = []
    for task_id, node in self.nodes.items():
        wbs_data.append({
            'Task ID': task_id,
            'Name': node.text
        })
    wbs_df = pd.DataFrame(wbs_data)
    
    # 取得佈局方向（如果有設定的話）
    direction = getattr(self, 'default_layout_direction', 'TB')
    
    # 呼叫模組化的佈局函數
    positions = layout_hierarchical(
        wbs_df,
        edges=self.edges,
        direction=direction,
        layer_spacing=200,
        node_spacing=150
    )
    
    # 套用位置到節點
    for task_id, (x, y) in positions.items():
        if task_id in self.nodes:
            self.nodes[task_id].setPos(x, y)
    
    # 佈局完成後調整場景範圍並確保內容可見
    self._updateSceneRectToFitNodes(padding=300)
    self._ensureContentVisible(margin=80)

# === 刪除原本的 applySimpleHierarchicalLayout 方法 ===
# （因為已經移到 layouts/hierarchical.py 內部）

# === 在 DsmEditor.__init__ 加入（選用）===
def __init__(self, wbsDf: pd.DataFrame, parent=None) -> None:
    super().__init__(parent)
    # ... 原有的初始化代碼 ...
    
    # 新增：路由邊線管理器（未來使用）
    self.routed_edge_manager = RoutedEdgeManager()  # TODO(next): 整合到實際邊線繪製
    
    # ... 其餘初始化代碼 ...

# === 修改 applyOrthogonalLayout 方法（使用模組化方法）===

def applyOrthogonalLayout(self) -> None:
    """
    正交式佈局 - 使用模組化的網格佈局。
    
    LAYOUT: moved to src/layouts/hierarchical.py (_simple_grid_layout)
    """
    from ..layouts.hierarchical import _simple_grid_layout
    
    task_ids = list(self.nodes.keys())
    
    # 使用模組化的網格佈局
    positions = _simple_grid_layout(
        task_ids,
        node_spacing=180,
        layer_spacing=120,
        direction='TB'
    )
    
    # 套用位置
    for task_id, (x, y) in positions.items():
        if task_id in self.nodes:
            self.nodes[task_id].setPos(x, y)
    
    self._updateSceneRectToFitNodes(padding=300)
    self._ensureContentVisible(margin=80)